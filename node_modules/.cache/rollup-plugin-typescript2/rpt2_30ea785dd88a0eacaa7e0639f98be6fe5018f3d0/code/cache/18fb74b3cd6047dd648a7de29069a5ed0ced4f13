{"code":"/**\r\n * A buffer object wrapper.\r\n */\r\nclass Buffer {\r\n    /**\r\n     * The buffer that is being read.\r\n     */\r\n    buffer;\r\n    /**\r\n     * DataView for the buffer.\r\n     */\r\n    viewer;\r\n    /**\r\n     * Next byte to read.\r\n     */\r\n    nextByte = 0;\r\n    /**\r\n     * Create a buffer wrapper.\r\n     *\r\n     * @param buffer ArrayBuffer to read\r\n     */\r\n    constructor(buffer) {\r\n        this.buffer = buffer;\r\n        this.viewer = new DataView(buffer);\r\n    }\r\n}\r\n/**\r\n * Represents an ArrayBuffer reader.\r\n */\r\nexport class BufferReader extends Buffer {\r\n    /**\r\n     * Read the next byte.\r\n     */\r\n    readByte() {\r\n        const result = this.viewer.getInt8(this.nextByte);\r\n        this.nextByte += 1;\r\n        return result;\r\n    }\r\n    /**\r\n     * Read the next unsigned byte.\r\n     */\r\n    readUnsingedByte() {\r\n        const result = this.viewer.getUint8(this.nextByte);\r\n        this.nextByte += 1;\r\n        return result;\r\n    }\r\n    /**\r\n     * Read the next short.\r\n     */\r\n    readShort() {\r\n        const result = this.viewer.getInt16(this.nextByte, true);\r\n        this.nextByte += 2;\r\n        return result;\r\n    }\r\n    /**\r\n     * Read the next integer.\r\n     */\r\n    readInt() {\r\n        const result = this.viewer.getInt32(this.nextByte, true);\r\n        this.nextByte += 4;\r\n        return result;\r\n    }\r\n    /**\r\n     * Read the next string.\r\n     */\r\n    readString() {\r\n        const length = this.readInt();\r\n        let result = \"\";\r\n        for (let i = 0; i < length; i++) {\r\n            const byte = this.readUnsingedByte();\r\n            result += String.fromCodePoint(byte);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Represents an ArrayBuffer writer.\r\n */\r\nexport class BufferWriter extends Buffer {\r\n    /**\r\n     * Whether to execute a dry run.\r\n     * Used to find the target size of the buffer.\r\n     */\r\n    dry;\r\n    /**\r\n     * Create a buffer writer.\r\n     *\r\n     * @param buffer ArrayBuffer to read\r\n     * @param dry Whether to execute a dry run\r\n     */\r\n    constructor(buffer, dry = false) {\r\n        super(buffer);\r\n        this.dry = dry;\r\n    }\r\n    /**\r\n     * Write a byte.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeByte(val) {\r\n        val ??= 0;\r\n        if (!this.dry) {\r\n            this.viewer.setInt8(this.nextByte, Math.floor(val));\r\n        }\r\n        this.nextByte += 1;\r\n    }\r\n    /**\r\n     * Write an unsigned byte.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeUnsignedByte(val) {\r\n        val ??= 0;\r\n        if (!this.dry) {\r\n            this.viewer.setUint8(this.nextByte, val);\r\n        }\r\n        this.nextByte += 1;\r\n    }\r\n    /**\r\n     * Write a short.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeShort(val) {\r\n        val ??= 0;\r\n        if (!this.dry) {\r\n            this.viewer.setInt16(this.nextByte, val, true);\r\n        }\r\n        this.nextByte += 2;\r\n    }\r\n    /**\r\n     * Write an integer.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeInt(val) {\r\n        val ??= 0;\r\n        if (!this.dry) {\r\n            this.viewer.setInt32(this.nextByte, val, true);\r\n        }\r\n        this.nextByte += 4;\r\n    }\r\n    /**\r\n     * Write a string.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeString(val) {\r\n        val ??= \"\";\r\n        this.writeInt(val.length);\r\n        for (const i of val) {\r\n            this.writeUnsignedByte(i.charCodeAt(0));\r\n        }\r\n    }\r\n}\r\n/**\r\n * The {@linkcode Layer} to utilize within the API.\r\n */\r\nlet LayerClass;\r\n/**\r\n * The {@linkcode Note} to utilize within the API.\r\n */\r\nlet NoteClass;\r\n/**\r\n * The {@linkcode Instrument} to utilize within the API.\r\n */\r\nlet InstrumentClass;\r\n/**\r\n * Get the {@linkcode Layer} class.\r\n *\r\n * Utilized when a specialized layer class is required.\r\n */\r\nfunction getLayerClass() {\r\n    return LayerClass;\r\n}\r\n/**\r\n * Set the layer class.\r\n *\r\n * Utilized when a specialized layer class is required.\r\n *\r\n * @example\r\n * ```js\r\n * import { Layer, setLayerClass } from \"@encode42/nbs.js\"\r\n *\r\n * class CustomLayer extends Layer {\r\n *      // Whether the layer is a custom layer\r\n *      isCustomLayer = false;\r\n * }\r\n *\r\n * setLayerClass(CustomLayer);\r\n * ```\r\n */\r\nfunction setLayerClass(clazz) {\r\n    LayerClass = clazz;\r\n}\r\n/**\r\n * Get the {@linkcode Note} class.\r\n *\r\n * Utilized when a specialized note class is required.\r\n */\r\nfunction getNoteClass() {\r\n    return NoteClass;\r\n}\r\n/**\r\n * Set the note class.\r\n *\r\n * Utilized when a specialized note class is required.\r\n *\r\n * @example\r\n * ```js\r\n * import { Note, setNoteClass } from \"@encode42/nbs.js\"\r\n *\r\n * class CustomNote extends Note {\r\n *      // The last tick the note was played.\r\n *      lastPlayed = 0;\r\n * }\r\n *\r\n * setNoteClass(CustomNote);\r\n * ```\r\n */\r\nfunction setNoteClass(clazz) {\r\n    NoteClass = clazz;\r\n}\r\n/**\r\n * Get the {@linkcode Instrument} class.\r\n *\r\n * Utilized when a specialized instrument class is required.\r\n */\r\nfunction getInstrumentClass() {\r\n    return InstrumentClass;\r\n}\r\n/**\r\n * Set the instrument class.\r\n *\r\n * Utilized when a specialized instrument class is required.\r\n *\r\n * @example\r\n * ```js\r\n * import { Instrument, setInstrumentClass } from \"@encode42/nbs.js\"\r\n *\r\n * class CustomInstrument extends Instrument {\r\n *      // Texture source file of the instrument.\r\n *      textureSrc = \"\";\r\n * }\r\n *\r\n * setInstrumentClass(CustomInstrument);\r\n * ```\r\n */\r\nfunction setInstrumentClass(clazz) {\r\n    InstrumentClass = clazz;\r\n}\r\nexport { getLayerClass, getNoteClass, getInstrumentClass, setLayerClass, setNoteClass, setInstrumentClass };\r\n","references":["/workspace/NBS.js/src/nbs/instrument/Instrument.ts","/workspace/NBS.js/src/nbs/Note.ts","/workspace/NBS.js/src/nbs/Layer.ts"],"dts":{"name":"/workspace/NBS.js/node_modules/.cache/rollup-plugin-typescript2/placeholder/util/util.d.ts","writeByteOrderMark":false,"text":"/**\r\n * A buffer object wrapper.\r\n */\r\ndeclare class Buffer {\r\n    /**\r\n     * The buffer that is being read.\r\n     */\r\n    readonly buffer: ArrayBuffer;\r\n    /**\r\n     * DataView for the buffer.\r\n     */\r\n    protected viewer: DataView;\r\n    /**\r\n     * Next byte to read.\r\n     */\r\n    nextByte: number;\r\n    /**\r\n     * Create a buffer wrapper.\r\n     *\r\n     * @param buffer ArrayBuffer to read\r\n     */\r\n    constructor(buffer: ArrayBuffer);\r\n}\r\n/**\r\n * Represents an ArrayBuffer reader.\r\n */\r\nexport declare class BufferReader extends Buffer {\r\n    /**\r\n     * Read the next byte.\r\n     */\r\n    readByte(): number;\r\n    /**\r\n     * Read the next unsigned byte.\r\n     */\r\n    readUnsingedByte(): number;\r\n    /**\r\n     * Read the next short.\r\n     */\r\n    readShort(): number;\r\n    /**\r\n     * Read the next integer.\r\n     */\r\n    readInt(): number;\r\n    /**\r\n     * Read the next string.\r\n     */\r\n    readString(): string;\r\n}\r\n/**\r\n * Represents an ArrayBuffer writer.\r\n */\r\nexport declare class BufferWriter extends Buffer {\r\n    /**\r\n     * Whether to execute a dry run.\r\n     * Used to find the target size of the buffer.\r\n     */\r\n    private readonly dry;\r\n    /**\r\n     * Create a buffer writer.\r\n     *\r\n     * @param buffer ArrayBuffer to read\r\n     * @param dry Whether to execute a dry run\r\n     */\r\n    constructor(buffer: ArrayBuffer, dry?: boolean);\r\n    /**\r\n     * Write a byte.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeByte(val: number | undefined): void;\r\n    /**\r\n     * Write an unsigned byte.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeUnsignedByte(val: number | undefined): void;\r\n    /**\r\n     * Write a short.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeShort(val: number | undefined): void;\r\n    /**\r\n     * Write an integer.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeInt(val: number | undefined): void;\r\n    /**\r\n     * Write a string.\r\n     *\r\n     * @param val Value to write\r\n     */\r\n    writeString(val: string | undefined): void;\r\n}\r\n/**\r\n * Get the {@linkcode Layer} class.\r\n *\r\n * Utilized when a specialized layer class is required.\r\n */\r\ndeclare function getLayerClass(): any;\r\n/**\r\n * Set the layer class.\r\n *\r\n * Utilized when a specialized layer class is required.\r\n *\r\n * @example\r\n * ```js\r\n * import { Layer, setLayerClass } from \"@encode42/nbs.js\"\r\n *\r\n * class CustomLayer extends Layer {\r\n *      // Whether the layer is a custom layer\r\n *      isCustomLayer = false;\r\n * }\r\n *\r\n * setLayerClass(CustomLayer);\r\n * ```\r\n */\r\ndeclare function setLayerClass(clazz: any): void;\r\n/**\r\n * Get the {@linkcode Note} class.\r\n *\r\n * Utilized when a specialized note class is required.\r\n */\r\ndeclare function getNoteClass(): any;\r\n/**\r\n * Set the note class.\r\n *\r\n * Utilized when a specialized note class is required.\r\n *\r\n * @example\r\n * ```js\r\n * import { Note, setNoteClass } from \"@encode42/nbs.js\"\r\n *\r\n * class CustomNote extends Note {\r\n *      // The last tick the note was played.\r\n *      lastPlayed = 0;\r\n * }\r\n *\r\n * setNoteClass(CustomNote);\r\n * ```\r\n */\r\ndeclare function setNoteClass(clazz: any): void;\r\n/**\r\n * Get the {@linkcode Instrument} class.\r\n *\r\n * Utilized when a specialized instrument class is required.\r\n */\r\ndeclare function getInstrumentClass(): any;\r\n/**\r\n * Set the instrument class.\r\n *\r\n * Utilized when a specialized instrument class is required.\r\n *\r\n * @example\r\n * ```js\r\n * import { Instrument, setInstrumentClass } from \"@encode42/nbs.js\"\r\n *\r\n * class CustomInstrument extends Instrument {\r\n *      // Texture source file of the instrument.\r\n *      textureSrc = \"\";\r\n * }\r\n *\r\n * setInstrumentClass(CustomInstrument);\r\n * ```\r\n */\r\ndeclare function setInstrumentClass(clazz: any): void;\r\nexport { getLayerClass, getNoteClass, getInstrumentClass, setLayerClass, setNoteClass, setInstrumentClass };\r\n"}}
