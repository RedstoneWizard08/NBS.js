{"code":"import { getNoteClass } from \"../util/util\";\r\nimport { defaultLayerMeta } from \"./interfaces/layer/LayerMeta\";\r\nimport { defaultNoteOptions } from \"./interfaces/note/NoteOptions\";\r\n/**\r\n * Represents a layer of a song instance.\r\n */\r\nexport default class Layer {\r\n    /**\r\n     * ID of the layer.\r\n     */\r\n    id;\r\n    /**\r\n     * Meta information for the layer.\r\n     *\r\n     * @see {@linkcode LayerMeta}\r\n     */\r\n    meta = { ...defaultLayerMeta };\r\n    /**\r\n     * Whether or not this layer has been marked as locked.\r\n     */\r\n    isLocked = false;\r\n    /**\r\n     * Whether or not this layer has been marked as solo.\r\n     */\r\n    isSolo = false;\r\n    /**\r\n     * The volume of the layer (percentage).\r\n     */\r\n    volume = 100;\r\n    /**\r\n     * How much this layer is panned to the left/right. 0 is 2 blocks right, 100 is center, 200 is 2 blocks left.\r\n     */\r\n    stereo = 0;\r\n    /**\r\n     * Notes within the layer.\r\n     */\r\n    notes = [];\r\n    /**\r\n     * Construct a layer.\r\n     *\r\n     * @param id ID of the layer\r\n     */\r\n    constructor(id) {\r\n        this.id = id;\r\n    }\r\n    /**\r\n     * Set the note at a tick.\r\n     *\r\n     * @param tick Tick to set the note on\r\n     * @param note Note to set on tick\r\n     */\r\n    setNote(tick, note) {\r\n        this.notes[tick] = note;\r\n        return note;\r\n    }\r\n    /**\r\n     * Create and add a note to a tick.\r\n     *\r\n     * @param tick Tick to set the note\r\n     * @param instrument The note's instrument\r\n     * @param options Options for the note\r\n     */\r\n    addNote(tick, instrument = 0, options = defaultNoteOptions) {\r\n        const note = new (getNoteClass())(instrument, options);\r\n        return this.setNote(tick, note);\r\n    }\r\n    /**\r\n     * Delete a note at a specified tick.\r\n     *\r\n     * @param tick Tick to remove note from\r\n     */\r\n    deleteNote(tick) {\r\n        delete this.notes[tick];\r\n    }\r\n}\r\n","references":["/workspace/NBS.js/src/nbs/Note.ts","/workspace/NBS.js/src/nbs/instrument/Instrument.ts","/workspace/NBS.js/src/util/util.ts","/workspace/NBS.js/src/nbs/interfaces/layer/LayerMeta.ts","/workspace/NBS.js/src/nbs/interfaces/note/NoteOptions.ts"],"dts":{"name":"/workspace/NBS.js/node_modules/.cache/rollup-plugin-typescript2/placeholder/nbs/Layer.d.ts","writeByteOrderMark":false,"text":"import Note from \"./Note\";\r\nimport Instrument from \"./instrument/Instrument\";\r\nimport NoteOptions from \"./interfaces/note/NoteOptions\";\r\n/**\r\n * Represents a layer of a song instance.\r\n */\r\nexport default class Layer {\r\n    /**\r\n     * ID of the layer.\r\n     */\r\n    id: number;\r\n    /**\r\n     * Meta information for the layer.\r\n     *\r\n     * @see {@linkcode LayerMeta}\r\n     */\r\n    meta: {\r\n        name: string;\r\n    };\r\n    /**\r\n     * Whether or not this layer has been marked as locked.\r\n     */\r\n    isLocked: boolean;\r\n    /**\r\n     * Whether or not this layer has been marked as solo.\r\n     */\r\n    isSolo: boolean;\r\n    /**\r\n     * The volume of the layer (percentage).\r\n     */\r\n    volume: number;\r\n    /**\r\n     * How much this layer is panned to the left/right. 0 is 2 blocks right, 100 is center, 200 is 2 blocks left.\r\n     */\r\n    stereo: number;\r\n    /**\r\n     * Notes within the layer.\r\n     */\r\n    notes: Note[];\r\n    /**\r\n     * Construct a layer.\r\n     *\r\n     * @param id ID of the layer\r\n     */\r\n    constructor(id: number);\r\n    /**\r\n     * Set the note at a tick.\r\n     *\r\n     * @param tick Tick to set the note on\r\n     * @param note Note to set on tick\r\n     */\r\n    setNote(tick: number, note: Note): Note;\r\n    /**\r\n     * Create and add a note to a tick.\r\n     *\r\n     * @param tick Tick to set the note\r\n     * @param instrument The note's instrument\r\n     * @param options Options for the note\r\n     */\r\n    addNote(tick: number, instrument?: Instrument | number, options?: NoteOptions): Note;\r\n    /**\r\n     * Delete a note at a specified tick.\r\n     *\r\n     * @param tick Tick to remove note from\r\n     */\r\n    deleteNote(tick: number): void;\r\n}\r\n"}}
